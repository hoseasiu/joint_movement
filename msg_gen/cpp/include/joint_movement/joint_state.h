/* Auto-generated by genmsg_cpp for file /home/hosea/ros_workspace/bmw/joint_movement/msg/joint_state.msg */
#ifndef JOINT_MOVEMENT_MESSAGE_JOINT_STATE_H
#define JOINT_MOVEMENT_MESSAGE_JOINT_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace joint_movement
{
template <class ContainerAllocator>
struct joint_state_ {
  typedef joint_state_<ContainerAllocator> Type;

  joint_state_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , xDot(0.0)
  , yDot(0.0)
  , zDot(0.0)
  , qx(0.0)
  , qy(0.0)
  , qz(0.0)
  , qw(0.0)
  {
  }

  joint_state_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , xDot(0.0)
  , yDot(0.0)
  , zDot(0.0)
  , qx(0.0)
  , qy(0.0)
  , qz(0.0)
  , qw(0.0)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _xDot_type;
  double xDot;

  typedef double _yDot_type;
  double yDot;

  typedef double _zDot_type;
  double zDot;

  typedef double _qx_type;
  double qx;

  typedef double _qy_type;
  double qy;

  typedef double _qz_type;
  double qz;

  typedef double _qw_type;
  double qw;


  typedef boost::shared_ptr< ::joint_movement::joint_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_movement::joint_state_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct joint_state
typedef  ::joint_movement::joint_state_<std::allocator<void> > joint_state;

typedef boost::shared_ptr< ::joint_movement::joint_state> joint_statePtr;
typedef boost::shared_ptr< ::joint_movement::joint_state const> joint_stateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::joint_movement::joint_state_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::joint_movement::joint_state_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace joint_movement

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::joint_movement::joint_state_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::joint_movement::joint_state_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::joint_movement::joint_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "40b41a7926a59de667cedeb989b0c8d6";
  }

  static const char* value(const  ::joint_movement::joint_state_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x40b41a7926a59de6ULL;
  static const uint64_t static_value2 = 0x67cedeb989b0c8d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_movement::joint_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joint_movement/joint_state";
  }

  static const char* value(const  ::joint_movement::joint_state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joint_movement::joint_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 x\n\
float64 y\n\
float64 z\n\
float64 xDot\n\
float64 yDot\n\
float64 zDot\n\
float64 qx\n\
float64 qy\n\
float64 qz\n\
float64 qw\n\
\n\
";
  }

  static const char* value(const  ::joint_movement::joint_state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::joint_movement::joint_state_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joint_movement::joint_state_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.xDot);
    stream.next(m.yDot);
    stream.next(m.zDot);
    stream.next(m.qx);
    stream.next(m.qy);
    stream.next(m.qz);
    stream.next(m.qw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct joint_state_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_movement::joint_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::joint_movement::joint_state_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "xDot: ";
    Printer<double>::stream(s, indent + "  ", v.xDot);
    s << indent << "yDot: ";
    Printer<double>::stream(s, indent + "  ", v.yDot);
    s << indent << "zDot: ";
    Printer<double>::stream(s, indent + "  ", v.zDot);
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
    s << indent << "qw: ";
    Printer<double>::stream(s, indent + "  ", v.qw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // JOINT_MOVEMENT_MESSAGE_JOINT_STATE_H

