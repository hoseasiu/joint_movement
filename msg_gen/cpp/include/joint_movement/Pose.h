/* Auto-generated by genmsg_cpp for file /home/hosea/ros_workspace/bmw/joint_movement/msg/Pose.msg */
#ifndef JOINT_MOVEMENT_MESSAGE_POSE_H
#define JOINT_MOVEMENT_MESSAGE_POSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace joint_movement
{
template <class ContainerAllocator>
struct Pose_ {
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , u(0.0)
  , v(0.0)
  , w(0.0)
  , a(0.0)
  , i(0.0)
  , j(0.0)
  , k(0.0)
  {
  }

  Pose_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , u(0.0)
  , v(0.0)
  , w(0.0)
  , a(0.0)
  , i(0.0)
  , j(0.0)
  , k(0.0)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _u_type;
  double u;

  typedef double _v_type;
  double v;

  typedef double _w_type;
  double w;

  typedef double _a_type;
  double a;

  typedef double _i_type;
  double i;

  typedef double _j_type;
  double j;

  typedef double _k_type;
  double k;


  typedef boost::shared_ptr< ::joint_movement::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_movement::Pose_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Pose
typedef  ::joint_movement::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::joint_movement::Pose> PosePtr;
typedef boost::shared_ptr< ::joint_movement::Pose const> PoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::joint_movement::Pose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::joint_movement::Pose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace joint_movement

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::joint_movement::Pose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::joint_movement::Pose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::joint_movement::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7c7c43e96731a35482506ec2cf4a77aa";
  }

  static const char* value(const  ::joint_movement::Pose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7c7c43e96731a354ULL;
  static const uint64_t static_value2 = 0x82506ec2cf4a77aaULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_movement::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joint_movement/Pose";
  }

  static const char* value(const  ::joint_movement::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joint_movement::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 x\n\
float64 y\n\
float64 z\n\
float64 u\n\
float64 v\n\
float64 w\n\
float64 a\n\
float64 i\n\
float64 j\n\
float64 k\n\
\n\
";
  }

  static const char* value(const  ::joint_movement::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::joint_movement::Pose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joint_movement::Pose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.u);
    stream.next(m.v);
    stream.next(m.w);
    stream.next(m.a);
    stream.next(m.i);
    stream.next(m.j);
    stream.next(m.k);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_movement::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::joint_movement::Pose_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "u: ";
    Printer<double>::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "i: ";
    Printer<double>::stream(s, indent + "  ", v.i);
    s << indent << "j: ";
    Printer<double>::stream(s, indent + "  ", v.j);
    s << indent << "k: ";
    Printer<double>::stream(s, indent + "  ", v.k);
  }
};


} // namespace message_operations
} // namespace ros

#endif // JOINT_MOVEMENT_MESSAGE_POSE_H

